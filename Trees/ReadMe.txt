ReadMe.txt--BSTNode.h—It has declaration of variable, function and constructor which supports in creating NODES for tree.--BSTNode.cpp—it has mostly implementation of constructor. It has also function like:-int keyValue(int)It is used to do recursive mathematical calculation to get nodes key values according to requirement.It has basic function of class and declaration to create nodes for BST tree.-data(int, int)it creates basic data for creating nodes, it gets two values and use the keyValue function and create data for the node.--BST.H--I have written all the function declaration is this file.--BST.CPP---BST()Constructor for this class-~BST()destructor for this class-BSTNode* search(int, BSTNode*It is used to search the node with given key. If you are facing tree with multiple node with same key, you just have to call it again like I have did in case 8 for KDtree.-void Insert(data, BSTNode*)-It will insert the data which is provided.-int height(BSTNode*)will measure the height of the node-void show(BSTNode*, string)Will create the .dot file for the BST tree. It will take root as a input parameter.-BSTNode* FindMin(BSTNode*)It will find minimum node for given value in the tree and return it.-BSTNode* deleteNode(BSTNode*,data)It takes data as a input and find the node related to that data and delete the node.-Bool contains(std::vector<int>, int)It will take vector of the number and input number. It will find the number into it and returns true and false according to the result.-Int randomNumber(std::vector<int>, int)It will take vector of generated keys and limit as a integer. It will create the random number within the limit by checking vector array of generated number and returns random number.KDNode.hIt has declaration of variable, function and constructor which supports in creating NODES for tree.KDNode.cppit has mostly implementation of constructor. It has also function like:-int keyValue(int)It is used to do recursive mathematical calculation to get nodes key values according to requirement.-KDData(int,int,int)it creates basic data for creating nodes, it gets three values and use the keyValue function and create data for the node.-bool Equals(KDData)it is usually used in the code to compare the data of both node.--KDT.h—this file contains declaration of  all the methods I have defined in the KDT.cpp file.--KDT.cpp—-KDT()It is constructor which is used to construct some properties of the KD tree.~KDT()It is destructor.KDNode* search(KDNode*,KDData,int)-it basically used to search the node with given keys. If you are facing tree with multiple node with same key, you just have to call it again like I have did in case 8.-Void insert(KDNode*,KDData)It inserts the given node in the tree.-void show(KDNode*, string)Will create the .dot file for the KD tree. It will take root as a input parameter and file name.-Int height(KDNode*)it will return the height of the KD tree.-std::pair<int, int> randomNumber2D(std::vector<std::pair<int, int>> generatedNumber, int limit)it will return the pair of number with random distinct value. It use vector<int, int> as a input to check whether it is already generated or not.-KDNode* deleteNode(KDNode*, KDData, int);It will find the given node from the tree and delete it.-KDNode* findMin(KDNode*, int, unsigned);It used to find a minimum node by iterating full tree fro the given node.-KDNode* findMinInTwo(KDNode*, KDNode*, int)It will used find minimum  from the two node by using its keys.-bool contains(std::vector<int> generatedNumber, int num)It will check and returns true if the number is in there in generatedNumber.-int randomNumber(std::vector<int> i, int)Used to generate random number.-bool contains2D(std::vector<std::pair<int, int>> generatedNumber, std::pair<int, int> num)-It is used to check whether par<vector<int,int>> is in there in generated number list. If it’s there then it return true otherwise false.Main.cpp-it has implementation of all the cases mentioned in the assignment.